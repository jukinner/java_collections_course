Section 2. collection behaniors

common methods amongst different types of collections

size()-get the number of elements in the collection
isEmpty()-boolean= returns true if size() == 0;
add() ensure that an element is in the collection
addAll() add all the elements of the argument collection to this collection
remove(element)
removeAll(collection)
retainAll(collection)
contains(element) true if in there
containsAll(collection) - True if all the elemments of the argument collection are in this collection
clear()-remove all elements from this collection



Lists
Also have a few methods
add(int index, E e)
get(int Index); like array[1] would return the value at index 1
remove(int index) - remove item at this index
set(int indext, E element); similar in ruby to array[0] = abc
boolean addAll(int index, Collection c); take this entire other collection and add it into your list.


Maps
general methods
put(K key, V value). returns the old value that used to be there. if there was no value, it will return null.
putAll(Map<K, V>). Adds all keys and values from another Map into your map.

Adding and Replacing.
put for a signle value, putAll for another Map
Null keys and values are implementation specific. (hash, vs tree map, etc).

looking up values.
get(Object key) will return null in the key doesn't exist.
containsKey(Object key) returns a boolean.
containsValue(object value). If you want to know if it exists before calling it, do a get then check if that is null or not.

contains key and get are fast. containsValue is slower than containsKey, it may have to search more extensively.

V remove(Object key). returns the old value that was returned, it returns null if it didn't exist or can't find it.

void clear() for removing.

Querying Size
int size()
boolean isEmpty()

Map is the only collection that don't extend or implement the collection Interface.

Java 8+ enhancements
Altering and Removing
replace(key,value) - update a single value, If the key is not there, it won't do anything.
replaceAll(BiFunction<K, V>) replace eelements using a function. Takes a Bifunction that takes a key, and the old value, and it returns a new value.
remove(key,value), remove a key only if it has a value.

Updating a Map
getOrDefault-takes a default value and returns that default if it doesn't find the get. reduces null pointer exceptions.
computeIfAbsent - takes a function that lets you compute a value, if it isn't there. Give it a key, returns value. if no value, it will compute the value.
putIfAbsent
computeIfPresent
compute - look up a key, takes afunction. if value is present, it returns it. If not, it will use your fucntion.
merge - takes a key AND a value and a remapping function. if there is no value, the value uses a new value. If value exists, merge is called on it. GOod for keeping a total in a value.

forEach(convenient callback based Iteration). similar to foreach on collection. There is no easy way to iterate over hashmaps without this. ForEach passes both

Map Implementation notes-understanding when to use which type of Map.

Hash Map -good general purpose implementation - good overall option
TreeMap-Defines sort order and adds functionality.-some circumstances when it is better.

There are identityHashMap, linkedHashMap, enumMap . Read on your own.

How does HashMap work?
1) uses the .hashcode() method of the key.
2) maintains an array of buckets.
3) computes the hash value from the key modulus the count of the buckerts and that defines a slot in the backing array to store it.

Buckets are linked lists to accommodate collisions. Each buckets are
in java 8 buckets can be trees.
the number of buckets increases with more elements (the backing array of elements)


TreeMap.
have keys with a defined sort order via comparator
they used a balanced binary tree. each node has 2 successive node. Nodes with lower sort orders go to the left. Bigger to the right.
The tree gets rebalanced so one side is never bigger than other side.
Generally hashmaps


WITH HASH MAPS-ALways have immutable values as your key. Having mutable keys can messup the hashcode system used to track what is in a hashMap.

Maps assocate keys and values.
2 key implementations. tree and hash. Hash is the general purpose
API still improving in Java8 and beyond.
There are other implementations. like enum map, linked HashMap. 